apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    //the compression of webp file during build causes problem with FileDescriptor in ContentProvider.
    aaptOptions {
        noCompress "webp"
    }

    // Declaration app name
    def nameApp = "Sticker WA"

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        versionProps['VERSION_CODE'] = '0'
    }

    // Declaration apk / aab name
    def nameAPK = nameApp.toLowerCase().replace(" ", "-")

    def code = versionProps['VERSION_CODE'].toInteger()

    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.frogobox.stickerwa"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders =
                [contentProviderAuthority: contentProviderAuthority]
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String",
                "CONTENT_PROVIDER_AUTHORITY",
                "\"${contentProviderAuthority}\"")

        // Declaration Room DB Name
        def nameDB = applicationId.replace(".","_").concat(".db")

        buildConfigField("String", "DATABASE_NAME", "\"${nameDB}\"")

        // Declaration apps name debug mode
        def debugAttribute = " Development"
        def nameAppDebug = nameApp + debugAttribute

        // Declaration admob id for debug
        def debugAdmobPublisherId = "ca-app-pub-3940256099942544~3347511713"
        def debugAdmobBanner = "ca-app-pub-3940256099942544/6300978111"
        def debugAdmobInterstitial = "ca-app-pub-3940256099942544/1033173712"
        def debugAdmobInterstitialVideo = "ca-app-pub-3940256099942544/8691691433"
        def debugAdmobRewardedVideo = "ca-app-pub-3940256099942544/5224354917"
        def debugAdmobNativeAdvanced = "ca-app-pub-3940256099942544/2247696110"
        def debugAdmobNativeAdvancedVideo = "ca-app-pub-3940256099942544/1044960115"

        // Naming APK // AAB
        setProperty("archivesBaseName", nameAPK + versionName + "#" + code + "-"
                + new Date().format('ddMMyy'))

        resConfigs "en", "id"
        vectorDrawables.useSupportLibrary = true

        // Inject app name for debug
        resValue "string", "app_name", nameAppDebug

        // Inject admob id for debug
        resValue "string", "admob_publisher_id", debugAdmobPublisherId
        resValue "string", "admob_banner", debugAdmobBanner
        resValue "string", "admob_interstitial", debugAdmobInterstitial
        resValue "string", "admob_interstitial_video", debugAdmobInterstitialVideo
        resValue "string", "admob_rewarded_video", debugAdmobRewardedVideo
        resValue "string", "admob_native_advanced", debugAdmobNativeAdvanced
        resValue "string", "admob_native_advanced_video", debugAdmobNativeAdvancedVideo

    }

    signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            // [PROJECT FOLDER NAME/app/[COPY YOUT KEY STORE] .jks in here
            storeFile file("frogoboxdev.jks")
            storePassword "cronoclez"
            keyAlias "frogobox"
            keyPassword "xeonranger"
        }
    }


    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Generated Signed APK / AAB
            signingConfig signingConfigs.release

            // Declaration admob id for release
            def releaseAdmobPublisherId = ""
            def releaseAdmobBanner = ""
            def releaseAdmobInterstitial = ""
            def releaseAdmobInterstitialVideo = ""
            def releaseAdmobRewardedVideo = ""
            def releaseAdmobNativeAdvanced = ""
            def releaseAdmobNativeAdvancedVideo = ""

            // Inject app name for release
            resValue "string", "app_name", nameApp

            // Inject admob id for release
            resValue "string", "admob_publisher_id", releaseAdmobPublisherId
            resValue "string", "admob_banner", releaseAdmobBanner
            resValue "string", "admob_interstitial", releaseAdmobInterstitial
            resValue "string", "admob_interstitial_video", releaseAdmobInterstitialVideo
            resValue "string", "admob_rewarded_video", releaseAdmobRewardedVideo
            resValue "string", "admob_native_advanced", releaseAdmobNativeAdvanced
            resValue "string", "admob_native_advanced_video", releaseAdmobNativeAdvancedVideo

        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude 'lib/*/libnative-imagetranscoder.so'
        exclude 'lib/*/libnative-filters.so'
    }

}

task checkDebug {
    doLast {
        println("checkDebug")
        if (android.defaultConfig.applicationId.startsWith("com.whatsapp")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")
        }
        checkApplicationIdInDebug()
    }
}

private void checkApplicationIdInDebug() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')
    if (ignoreApplicationIdCheck == null) {
        if (android.defaultConfig.applicationId == "com.example.samplestickerapp") {
            throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
        }
    } else {
        println("application id check ignored")
    }
}


task checkRelease {
    doLast {
        println("checkRelease")
        if (android.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.whenTaskAdded { task ->
    println(task.name)
    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }
    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation "androidx.core:core-ktx:1.5.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation 'com.android.support:multidex:1.0.3'

    // lib google ads
    implementation 'com.google.android.gms:play-services-ads:20.2.0'
    implementation 'com.google.android.material:material:1.3.0'

    // library frogo-admob-helper
    implementation 'com.github.amirisback:frogo-admob:2.0.2'

    // lib fresco facebook
    implementation "com.facebook.fresco:fresco:2.1.0"
    implementation "com.facebook.fresco:webpsupport:2.1.0"
    implementation "com.facebook.fresco:animated-webp:2.1.0"
    implementation "com.facebook.fresco:animated-base:2.1.0"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}